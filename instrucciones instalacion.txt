laragon 6 es una version portable, se puede ejecutar directamente desde la carpeta descomprimida.
ya tiene puesta la versión de php necesaria para ejecutar el proyecto.

haría falta que se añadiese al path del sistema la ruta hasta el binario de php, para ello:

inicio->configuracion->acerca de->configuracion avanzada del sistema->variables de entorno

en variables de usuario editamos "path" y añadimos la ruta hasta la carpeta {ruta hasta laragon}\laragon-6.0.0\bin\php\php-8.2.18-Win32-vs16-x64

para comprobar si ha quedado correcto, primero ejecutamos laragon e iniciamos los servicios. Seguidamente abrimos un terminal de windows y ejecutamos "php --version"

esto debería darnos como resultado:

PHP 8.2.18 (cli) (built: Apr  9 2024 22:22:57) (ZTS Visual C++ 2019 x64)
Copyright (c) The PHP Group
Zend Engine v4.2.18, Copyright (c) Zend Technologies

si tenemos instalado visual studio code (suminstrado en la carpeta software), podremos abrir la carpeta donde se encuentra el proyecto, si no con cualquier otro editor, pero vscode integra una terminal de comandos, utilizando otros IDEs deberemos usar una linea de comandos
y situarnos en la carpeta del proyecto.

lo primero es renombrar el fichero .env2 a .env
editamos este fichero y añadimo la clave "APP_KEY=" después de "APP_ENV=local",
laragon por defecto inicia mysql sin contraseña en el usuario root, así que no hace falta tocar nada más.

A continuación, en la barra de tareas, donde están las aplicaciones en segundo plano, localizamos el icono de laragon. Hacemos botón derecho sobre el y vamos a la opción: MySQL-> HeidiSQL
en HeidiSQL hacemos doble clic sobre "Unnamed", esto nos abre la comunicación con la base de datos, mantendremos esta ventana abierta durante la ejecución del proyecto para poder ver las inserciones en la base de datos

sobre Unnamed->botón derecho->crear nuevo-> base de datos

en nombre ponemos IDA y collation la establecemos a utf8mb4_0900_ai_ci

aceptamos y ya tenemos creada la base de datos.

Si no los tenemos instalados, necesitaremos instalar los programas de la carpeta software (hace falta que el equipo tenga acceso a internet para su instalación):

 composer, el ejecutable suminstrado como "Composer-Setup.exe", node, suministrado como "node-v20.12.2-x64"

Después hará falta reiniciar el equipo para tener acceso a composer

después del reinicio iniciamos los servicios de laragon y volvemos a vscode, situándonos en el carpeta del proyecto y procederemos con la instalación de las dependencias, en un terminal ejecutamos los comandos:
composer update
npm install

volvemos a vscode y procederemos con la migraciones, la forma que laravel denomina a la creación de las tablas de la base de datos.
en vscode abrimos un terminal (mysql de laragon debe estar en funcionamiento) y ejecutamos el comando:


php artisan migrate
php artisan storage:link

por último debemos ejectuar nuestros servicios de test web para poder acceder al proyecto, deberemos tener tres terminales abiertas en vscode.

en la primera terminal ejecutamos: npm run dev
en la segunda terminal ejecutamos: php artisan serve
la tercera terminal queda para la ejecución de comandos

mediante un navegador accedemos a la dirección: http://127.0.0.1:8001/

veremos que nos presenta una página con la descripción "No application encryption key has been specified.", aquí pulsaremos el botón "generate app key" y luego "refresh now"

si el sistema presenta un error diciendo que no puede generar la clave, deberemos editar el fichero .env y añadir o duplicar la clave "APP_KEY=" mencionada anteriormente.

volveremos a generar la app key mediante la web.

ya podremos acceder al proyecto, pero no contiene datos ni hay un usuario administrador del sistema, para hacerlo rellenaremos la base de datos con semillas (seeders) que se han programado en laravel.

en nuestra tercera terminal ejecutamos:
php artisan db:seed
php artisan db:seed UserSeeder

para el acceso al panel, por ahora el usuario es vilas@yahoo.com   pass: 12345678

estructura del proyecto:


.env -> configuraciones iniciales del programa
urls: routes->web.php
validaciones: app->htttp->requests
vistas: resources->views
controladores: app->http->controllers
requests:  app->http->requests
modelos: app->models
migraciones: database->migrations

factories: database->factories

seeders: database->seeders

configuraciones: config











